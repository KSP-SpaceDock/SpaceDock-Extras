# CKAN extension for SpaceDock Backend
# Copyright (c) 2016 The SpaceDock Team
# Licensed under the terms of the MIT License
#
# Name: SpaceDock.extras.ckan

from flask import request
from SpaceDock.config import Config
from SpaceDock.config import cfg as sdcfg
from SpaceDock.routing import add_wrapper, route
from SpaceDock.common import *
from SpaceDock.objects import *

# Load the config
cfg = Config('ckan.ini')

# Adds a mod to CKAN
@route('/api/mods/<gameshort>/<modid>/add_ckan', methods=['POST'])
@user_has('mods-edit', params=['gameshort', 'modid'])
def add_ckan(gameshort, modid):
    # Checks
    if not modid.isdigit() or not Mod.query.filter(Mod.id == int(modid)).first():
        return {'error': True, 'reasons': ['The modid is invalid']}, 400
    if not Mod.query.filter(Mod.id == int(modid)).filter(Mod.game_id == game_id(gameshort)).first():
        return {'error': True, 'reasons': ['The gameshort is invalid.']}, 400
		
	# Find the mod
	mod = Mod.query.filter(Mod.id == int(modid)).first()
	
	# Add to CKAN
	mod['ckan'] = True
	url = add_to_ckan(mod)
	return {'error': False, 'count': 1, 'data': url}
	

def add_to_ckan(mod):
    if not cfg['netkan_repo_path']:
        return
    if not mod['ckan']:
        return
    json_blob = {
        'spec_version': 'v1.4',
        'identifier': re.sub(r'\W+', '', mod.name),
        '$kref': '#/ckan/spacedock/' + str(mod.id),
        'license': mod.license,
        'x_via': 'Automated SpaceDock CKAN submission'
    }
    wd = cfg['netkan_repo_path']
    path = os.path.join(wd, 'NetKAN', json_blob['identifier'] + '.netkan')

    if os.path.exists(path):
        # If the file is already there, then chances are this mod has already been indexed
        return

    with open(path, 'w') as f:
        f.write(json.dumps(json_blob, indent=4))
    subprocess.call(['git', 'fetch', 'upstream'], cwd=wd)
    subprocess.call(['git', 'checkout', '-b', 'add-' + json_blob['identifier'], 'upstream/master'], cwd=wd)
    subprocess.call(['git', 'add', '-A'], cwd=wd)
    subprocess.call(['git', 'commit', '-m', 'Add {0} from SpaceDock\n\nThis is an automated commit on behalf of {1}'.format(mod.name, mod.user.username), '--author={0} <{1}>'.format(mod.user.username, mod.user.email)], cwd=wd)
    subprocess.call(['git', 'push', '-u', 'origin', 'add-' + json_blob['identifier']], cwd=wd)
    g = Github(cfg['github_user'], cfg['github_pass'])
    r = g.get_repo("KSP-CKAN/NetKAN")
    p = r.create_pull(title="Add {0} from SpaceDock".format(mod.name), base=r.default_branch, head=cfg['github_user'] + ":add-" + json_blob['identifier'], body=\
"""\
This pull request was automatically generated by SpaceDock on behalf of {0}, to add [{1}]({4}{2}) to CKAN.

Mod details:
    name = {2}
    author = {0}
    abstract = {6}
    license = {7}
    Homepage = {8}
    description = {5}

Please direct questions about this pull request to [{0}]({4}{3}).
""".format(mod.user.username, mod.name,\
    create_mod_url(mod.id, mod.name),\
    create_profile_url(mod.user.id, mod.user.username),\
    sdcfg["protocol"] + "://" + sdcfg["domain"],\
    mod.description, mod.short_description,\
    mod.license, mod.external_link))
	return p.url
	
def create_mod_url(id, name):
    route = cfg['mod-url']
    return route.replace('{id}', str(id)).replace('{name}', name) # Using manual replacement here, so users dont need to use both values
	
def create_profile_url(id, name):
    route = cfg['profile-url']
    return route.replace('{id}', str(id)).replace('{name}', name) # Using manual replacement here, so users dont need to use both values
	